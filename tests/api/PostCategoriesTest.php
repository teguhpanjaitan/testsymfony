<?php
// api/tests/BooksTest.php

namespace App\Tests\Api;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\PostCategory;
// use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;

class PostCategoriesTest extends ApiTestCase
{
    // This trait provided by HautelookAliceBundle will take care of refreshing the database content to a known state before each test
    // use RefreshDatabaseTrait;

    public function testGetCollection(): void
    {
        // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
        $response = static::createClient()->request('GET', '/api/post_categories');

        $this->assertResponseIsSuccessful();
        // Asserts that the returned content type is JSON-LD (the default)
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        // Asserts that the returned JSON is a superset of this one
        $this->assertJsonContains([
            '@context' => '/api/contexts/PostCategory',
            '@id' => '/api/post_categories',
            '@type' => 'hydra:Collection',
            'hydra:totalItems' => 50,
            'hydra:view' => [
                '@id' => '/api/post_categories?page=1',
                '@type' => 'hydra:PartialCollectionView',
                'hydra:first' => '/api/post_categories?page=1',
                'hydra:last' => '/api/post_categories?page=2',
                'hydra:next' => '/api/post_categories?page=2',
            ],
        ]);

        // Because test fixtures are automatically loaded between each test, you can assert on them
        $this->assertCount(30, $response->toArray()['hydra:member']);

        // Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
        // This generated JSON Schema is also used in the OpenAPI spec!
        $this->assertMatchesResourceCollectionJsonSchema(PostCategory::class);
    }

    public function testCreateBook(): void
    {
        $date = new \DateTime("now");
        $date1 = $date->format('Y-m-d H:i:s');
        $date2 = $date->format('c'); //"2020-01-14T04:05:08+00:00"

        $response = static::createClient()->request('POST', '/api/post_categories', ['json' => [
            'name' => 'Test category 1',
            'modifiedOn' => $date1,
            'status' => true
        ]]);

        $this->assertResponseStatusCodeSame(201);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
        $this->assertJsonContains([
            '@context' => '/api/contexts/PostCategory',
            '@type' => 'PostCategory',
            'name' => 'Test category 1',
            'modifiedOn' => $date2,
            'status' => true
        ]);
        $this->assertRegExp('~^/api/post_categories/\d+$~', $response->toArray()['@id']);
        $this->assertMatchesResourceItemJsonSchema(PostCategory::class);
    }

    // public function testCreateInvalidBook(): void
    // {
    //     static::createClient()->request('POST', '/books', ['json' => [
    //         'isbn' => 'invalid',
    //     ]]);

    //     $this->assertResponseStatusCodeSame(400);
    //     $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

    //     $this->assertJsonContains([
    //         '@context' => '/contexts/ConstraintViolationList',
    //         '@type' => 'ConstraintViolationList',
    //         'hydra:title' => 'An error occurred',
    //         'hydra:description' => 'isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.
    //         title: This value should not be blank.
    //         description: This value should not be blank.
    //         author: This value should not be blank.
    //         publicationDate: This value should not be null.',
    //     ]);
    // }

    public function testUpdateBook(): void
    {
        $client = static::createClient();

        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = static::findIriBy(PostCategory::class, ['name' => 'Test category 1']);

        $date = new \DateTime("now");
        $date1 = $date->format('Y-m-d H:i:s');
        $date2 = $date->format('c'); //"2020-01-14T04:05:08+00:00"

        $client->request('PUT', $iri, ['json' => [
            'name' => 'Test category 2',
            'modifiedOn' => $date1
        ]]);

        $this->assertResponseIsSuccessful();
        $this->assertJsonContains([
            '@id' => $iri,
            'name' => 'Test category 2',
            'modifiedOn' => $date2
        ]);
    }

    public function testDeleteBook(): void
    {
        $client = static::createClient();
        $iri = static::findIriBy(PostCategory::class, ['name' => 'Test category 2']);

        $client->request('DELETE', $iri);

        $this->assertResponseStatusCodeSame(204);
        $this->assertNull(
            // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
            static::$container->get('doctrine')->getRepository(PostCategory::class)->findOneBy(['name' => 'Test category 2'])
        );
    }
}
